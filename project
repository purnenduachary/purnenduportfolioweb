package com.lms.dao;

import java.sql.*;
import java.util.*;
import com.lms.model.Employ;
import com.lms.model.LeaveDetails;

public class LmsDaoImpl implements LmsDao {

    Connection con;
    
    public LmsDaoImpl() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/yourdatabasename", 
                "yourusername", 
                "yourpassword"
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Employ> showEmploy() {
        List<Employ> employList = new ArrayList<>();
        try {
            PreparedStatement ps = con.prepareStatement("SELECT * FROM employee");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Employ emp = new Employ();
                emp.setEmpId(rs.getInt("emp_id"));
                emp.setEmpName(rs.getString("emp_name"));
                emp.setEmpDept(rs.getString("emp_dept"));
                emp.setEmpMgrId(rs.getString("emp_mgr_id"));
                emp.setLeaveAvail(rs.getInt("leave_avail"));
                employList.add(emp);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return employList;
    }

    @Override
    public Employ searchEmploy(int empId) {
        Employ emp = null;
        try {
            PreparedStatement ps = con.prepareStatement("SELECT * FROM employee WHERE emp_id = ?");
            ps.setInt(1, empId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                emp = new Employ();
                emp.setEmpId(rs.getInt("emp_id"));
                emp.setEmpName(rs.getString("emp_name"));
                emp.setEmpDept(rs.getString("emp_dept"));
                emp.setEmpMgrId(rs.getString("emp_mgr_id"));
                emp.setLeaveAvail(rs.getInt("leave_avail"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return emp;
    }

    @Override
    public String applyLeave(LeaveDetails leave) {
        try {
            // Fetch Employ Details
            Employ emp = searchEmploy(leave.getEmpId());
            if (emp == null) {
                return "Employee not found!";
            }

            // Validations
            Date today = new Date(System.currentTimeMillis());
            if (leave.getLeaveStartDate().before(today) || leave.getLeaveEndDate().before(today)) {
                return "Leave dates cannot be in the past!";
            }
            if (leave.getLeaveStartDate().after(leave.getLeaveEndDate())) {
                return "Leave start date cannot be after end date!";
            }
            long diff = leave.getLeaveEndDate().getTime() - leave.getLeaveStartDate().getTime();
            int noOfDays = (int) (diff / (1000 * 60 * 60 * 24)) + 1; // Including both start and end dates
            if (noOfDays > emp.getLeaveAvail()) {
                return "Not enough leave balance!";
            }

            // Insert Leave into leave_history table
            PreparedStatement ps = con.prepareStatement(
                "INSERT INTO leave_history (emp_id, leave_start_date, leave_end_date, leave_type, leave_reason, no_of_days, leave_status) VALUES (?, ?, ?, ?, ?, ?, 'PENDING')"
            );
            ps.setInt(1, leave.getEmpId());
            ps.setDate(2, leave.getLeaveStartDate());
            ps.setDate(3, leave.getLeaveEndDate());
            ps.setString(4, leave.getLeaveType());
            ps.setString(5, leave.getLeaveReason());
            ps.setInt(6, noOfDays);

            int res = ps.executeUpdate();
            if (res == 1) {
                // Update Leave Balance in employee table
                PreparedStatement ps1 = con.prepareStatement(
                    "UPDATE employee SET leave_avail = leave_avail - ? WHERE emp_id = ?"
                );
                ps1.setInt(1, noOfDays);
                ps1.setInt(2, leave.getEmpId());
                ps1.executeUpdate();

                return "Leave applied successfully!";
            } else {
                return "Error applying leave!";
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "Database Error!";
        }
    }

    @Override
    public List<LeaveDetails> leaveHistory(int empId) {
        List<LeaveDetails> list = new ArrayList<>();
        try {
            PreparedStatement ps = con.prepareStatement("SELECT * FROM leave_history WHERE emp_id = ?");
            ps.setInt(1, empId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                LeaveDetails leave = new LeaveDetails();
                leave.setLeaveId(rs.getInt("leave_id"));
                leave.setEmpId(rs.getInt("emp_id"));
                leave.setLeaveStartDate(rs.getDate("leave_start_date"));
                leave.setLeaveEndDate(rs.getDate("leave_end_date"));
                leave.setLeaveType(rs.getString("leave_type"));
                leave.setLeaveReason(rs.getString("leave_reason"));
                leave.setNoOfDays(rs.getInt("no_of_days"));
                leave.setLeaveStatus(rs.getString("leave_status"));
                leave.setManagerComments(rs.getString("manager_comments"));
                list.add(leave);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public List<LeaveDetails> pendingLeaveHistory(int managerId) {
        List<LeaveDetails> list = new ArrayList<>();
        try {
            PreparedStatement ps = con.prepareStatement(
                "SELECT l.* FROM leave_history l JOIN employee e ON l.emp_id = e.emp_id WHERE e.emp_mgr_id = ? AND l.leave_status = 'PENDING'"
            );
            ps.setInt(1, managerId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                LeaveDetails leave = new LeaveDetails();
                leave.setLeaveId(rs.getInt("leave_id"));
                leave.setEmpId(rs.getInt("emp_id"));
                leave.setLeaveStartDate(rs.getDate("leave_start_date"));
                leave.setLeaveEndDate(rs.getDate("leave_end_date"));
                leave.setLeaveType(rs.getString("leave_type"));
                leave.setLeaveReason(rs.getString("leave_reason"));
                leave.setNoOfDays(rs.getInt("no_of_days"));
                leave.setLeaveStatus(rs.getString("leave_status"));
                leave.setManagerComments(rs.getString("manager_comments"));
                list.add(leave);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public String approveDeny(int leaveId, int managerId, String status, String managerComments) {
        try {
            // First, fetch leave details
            PreparedStatement ps = con.prepareStatement(
                "SELECT l.*, e.emp_mgr_id FROM leave_history l JOIN employee e ON l.emp_id = e.emp_id WHERE l.leave_id = ?"
            );
            ps.setInt(1, leaveId);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) {
                return "Invalid Leave Id!";
            }
            int empMgrId = Integer.parseInt(rs.getString("emp_mgr_id"));
            int noOfDays = rs.getInt("no_of_days");
            int empId = rs.getInt("emp_id");

            if (empMgrId != managerId) {
                return "Unauthorized Manager!";
            }

            if (status.equalsIgnoreCase("YES")) {
                // Approve
                PreparedStatement ps1 = con.prepareStatement(
                    "UPDATE leave_history SET leave_status = 'APPROVED', manager_comments = ? WHERE leave_id = ?"
                );
                ps1.setString(1, managerComments);
                ps1.setInt(2, leaveId);
                ps1.executeUpdate();
                return "Leave Approved Successfully!";
            } else {
                // Deny
                PreparedStatement ps1 = con.prepareStatement(
                    "UPDATE leave_history SET leave_status = 'DENIED', manager_comments = ? WHERE leave_id = ?"
                );
                ps1.setString(1, managerComments);
                ps1.setInt(2, leaveId);
                ps1.executeUpdate();

                // Add back the noOfDays to employee's leave balance
                PreparedStatement ps2 = con.prepareStatement(
                    "UPDATE employee SET leave_avail = leave_avail + ? WHERE emp_id = ?"
                );
                ps2.setInt(1, noOfDays);
                ps2.setInt(2, empId);
                ps2.executeUpdate();

                return "Leave Denied and leave balance restored!";
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "Database Error!";
        }
    }
}
